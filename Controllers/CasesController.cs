using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using CaseLogger3.Models;
using System.Net;


/*@*Caitlin Boake 
    ASP.NET 
    5/12/16 
    C# with EF*@*/

namespace CaseLogger3.Models
{
    public class CasesController : Controller
    {
        private CaseContext db = new CaseContext();

        // GET: Cases
        // no view for this, no used
        public ActionResult Index()
        {
            return View();
        }


        [HttpGet]
        public ActionResult MyCases()
        {
            if (Session["LogEmpDbID"] != null) //checks if logged in
            {
                string MyEmpDB_ID = (string)Session["LogEmpDbID"];
                string MyEmpID = (string)Session["LogEmpID"];
                string MyEmpName = (string)Session["LogEmpName"];

                int intEmpDB_ID = Convert.ToInt32(MyEmpDB_ID);
                int intMyEmpID = Convert.ToInt32(MyEmpID);

                if (MyEmpID != null)
                {
                    var empobj = from c in db.cases
                                 select c;
                    empobj = empobj.Where(c => c.EmpID == intMyEmpID); //displays cases with the same id as the user that is logged in 
                    return View(empobj.ToList());
                }
            }
            else
            {
                //ViewData["MsgError"] = "Please log in"; //viewdata was out of reach for this?
                HttpContext.Application["MsgError"] = "Please log in"; //ended up using app "vars"
                return RedirectToAction("Login", "Employees");
            }
            
            return View();
        }


        // GET: Cases/Create
        public ActionResult Create(int? passvar)
        {
            //if the user is navigating from the student lookup page, this gets the student id from the page's routing var pasvar
            if (passvar != null)
            {
                ViewData["thisSdtID"] = (int)passvar;
            }


            if (Session["LogEmpDbID"] != null) //checks if logged in 
            {
                return View();
            }
            else 
            {
                //ViewData["MsgError"] = "Please log in";
                HttpContext.Application["MsgError"] = "Please log in";
                return RedirectToAction("Login", "Employees");
            }

        }

        // POST: Cases/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        //uses autogenerated code that was copy pasted here
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "CaseID,EmpID,StudID,Date,CaseType,Outcome")] Case @case)
        {
            if (ModelState.IsValid)
            {
                db.cases.Add(@case);
                db.SaveChanges();
                return RedirectToAction("MyCases");
            }

            return View(@case);
        }


        // GET: Cases/Edit/5
        // no catch and redirect to login here because no physical links exist to this page unless logged in
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Case @case = db.cases.Find(id);
            if (@case == null)
            {
                return HttpNotFound();
            }
            return View(@case);
        }

        // POST: Cases/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "CaseID,EmpID,StudID,Date,CaseType,Outcome")] Case @case)
        {
            if (ModelState.IsValid)
            {
                db.Entry(@case).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("MyCases");
            }
            return View(@case);
        }

        // GET: Cases/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Case @case = db.cases.Find(id);
            if (@case == null)
            {
                return HttpNotFound();
            }
            return View(@case);
        }

        // POST: Cases/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Case @case = db.cases.Find(id);
            db.cases.Remove(@case);
            db.SaveChanges();
            return RedirectToAction("MyCases");
        }

        protected override void Dispose(bool disposing)  //dispose db
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

    }
}